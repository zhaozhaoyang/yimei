1、promise: 解决异步
	
	let wake = (time) => {
	  return new Promise((resolve, reject) => {
		setTimeout(() => {
		  resolve(`${time / 1000}秒后醒来`)
		}, time)
	  })
	}

	let p1 = wake(3000)
	let p2 = wake(2000)

	Promise.all([p1, p2]).then((result) => {
	  console.log(result)       // [ '3秒后醒来', '2秒后醒来' ]
	}).catch((error) => {
	  console.log(error)
	})
	
2、async/await

	function wake(time){
	  return new Promise((resolve, reject) => {
		setTimeout(() => {
		  resolve(`${time / 1000}秒后醒来`)
		}, time)
	  })
	}
	
	async function aaa(){				
		let p1 = await wake(3000)
		let p2 = await wake(2000)
		console.log(p1)
		console.log(p2)
	}

	aaa();
	
	await只能用在async函数中，不能暴露在外面，await不能工作在顶级作用域。
	
	函数前面的async一词意味着一个简单的事情：这个函数总是返回一个promise，
	如果代码中有return <非promise>语句，JavaScript会自动把返回的这个value值包装成promise的resolved值。

	参考：https://segmentfault.com/a/1190000013292562?utm_source=channel-newest#articleHeader3